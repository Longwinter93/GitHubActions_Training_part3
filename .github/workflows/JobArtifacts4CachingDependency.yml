name: Fourth Cache Dependency Job Artifacts
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
#We intend to shorten a Install Dependencies step because it is the slowest
#Thanks to that, we can save money and time
#We need to install this dependencies on each step, thus we want to avoid it
#We want to cache these dependencies that this cached dependencies can be used in subsequent workflows
#Unless these dependecies changed must be reinstalled.continue-on-error: 
#Adding Caching - add a new step before the step that actually produces files that should be cached -> Install dependencies
#This action needs some configuration: with - to specify paths that point files and folders should be cached
#~/npm - this is a path used by npm tool for its interal dependancy cache

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
            path: ~/.npm
            key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
#path -> This npm created cache folder should be stored on GitHub server 
#and reused in either other jobs or other Workflow executions
#We must give this cache a key - this key will be used to retrieve the cache in the future and recreate the folder on the runner machine
#This key also indicates that it must be recreated because for example some dependancy changed
#We add a hashFiles expression - to produce unique hash values based on a file path - the context of the package-lock.json file
#We reference to this package-lock.json file since it specifies all the dependencies of this project and the exact verions
#of these dependencies. If any of dependencies are changed, a hash key is also changed
#If new dependencies were installed, a new dependencies will be cached again
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
        script-file1: ${{ steps.publish.outputs.script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
#We need to repeat this step in all jobs that do install dependencies
#The cache action uses one central cache
#We are going to cache these dependencies here.
#We placed these dependencies into the cache in the job test already
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
            path: ~/.npm
            key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
#a job build will use the same cache because one central cache is available across Workflow executions
#Therefore, if dependencies were cached in one job, there will be available in other jobs/Workflow execution cycles
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files 
      - name: Output contents. List of all folders that are available in this folder dist-files (artifacts)
        run: ls
      - name: Output filename
        run: echo '${{ needs.build.outputs.script-file1 }}'
      - name: Deploy
        run: echo "Deploying..."


#We can see at Workflows on GitHub Action.
#After first running workflows, there is no input keys (hash) in a Cache dependencies in a test job
#In a Post Cache dependencies step in a test job, we can see that a hash key was generated
#A cached was saved, therefore in this workflow
#Thus, we can see a Install Dependencies step in a build job takes less time - it goes faster
#If we go to a Cache Dependencies step in a build job, a cached was downloaded and restored it - we can see a hash key
#Then, the dependencies were installed.
#A Install dependencies step, npm uses  that cache folder that was recreated by the Cache Dependencies steps

#Rerunning this workflow again
#In each job in each step - cache was restored
#If we update our dependencies, a new hash key will be restored and old cached will be discarded.
#In the first job, we do not see that cached is restored and reused. Then, in the next jobs we can see it